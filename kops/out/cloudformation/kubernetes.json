{
  "Resources": {
    "AWSAutoScalingAutoScalingGroupmasteruseast1amastersk8sdamdamme": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "master-us-east-1a.masters.k8s.damdam.me",
        "LaunchConfigurationName": {
          "Ref": "AWSAutoScalingLaunchConfigurationmasteruseast1amastersk8sdamdamme"
        },
        "MaxSize": 1,
        "MinSize": 1,
        "VPCZoneIdentifier": [
          {
            "Ref": "AWSEC2Subnetuseast1ak8sdamdamme"
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": "master-us-east-1a.masters.k8s.damdam.me",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/cluster-autoscaler/node-template/label/kops.k8s.io/instancegroup",
            "Value": "master-us-east-1a",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1",
            "PropagateAtLaunch": true
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ]
      }
    },
    "AWSAutoScalingAutoScalingGroupmasteruseast1bmastersk8sdamdamme": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "master-us-east-1b.masters.k8s.damdam.me",
        "LaunchConfigurationName": {
          "Ref": "AWSAutoScalingLaunchConfigurationmasteruseast1bmastersk8sdamdamme"
        },
        "MaxSize": 1,
        "MinSize": 1,
        "VPCZoneIdentifier": [
          {
            "Ref": "AWSEC2Subnetuseast1bk8sdamdamme"
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": "master-us-east-1b.masters.k8s.damdam.me",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/cluster-autoscaler/node-template/label/kops.k8s.io/instancegroup",
            "Value": "master-us-east-1b",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1",
            "PropagateAtLaunch": true
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ]
      }
    },
    "AWSAutoScalingAutoScalingGroupmasteruseast1cmastersk8sdamdamme": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "master-us-east-1c.masters.k8s.damdam.me",
        "LaunchConfigurationName": {
          "Ref": "AWSAutoScalingLaunchConfigurationmasteruseast1cmastersk8sdamdamme"
        },
        "MaxSize": 1,
        "MinSize": 1,
        "VPCZoneIdentifier": [
          {
            "Ref": "AWSEC2Subnetuseast1ck8sdamdamme"
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": "master-us-east-1c.masters.k8s.damdam.me",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/cluster-autoscaler/node-template/label/kops.k8s.io/instancegroup",
            "Value": "master-us-east-1c",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1",
            "PropagateAtLaunch": true
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ]
      }
    },
    "AWSAutoScalingAutoScalingGroupnodesk8sdamdamme": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "nodes.k8s.damdam.me",
        "LaunchConfigurationName": {
          "Ref": "AWSAutoScalingLaunchConfigurationnodesk8sdamdamme"
        },
        "MaxSize": 3,
        "MinSize": 3,
        "VPCZoneIdentifier": [
          {
            "Ref": "AWSEC2Subnetuseast1ak8sdamdamme"
          },
          {
            "Ref": "AWSEC2Subnetuseast1bk8sdamdamme"
          },
          {
            "Ref": "AWSEC2Subnetuseast1ck8sdamdamme"
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": "nodes.k8s.damdam.me",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/cluster-autoscaler/node-template/label/kops.k8s.io/instancegroup",
            "Value": "nodes",
            "PropagateAtLaunch": true
          },
          {
            "Key": "k8s.io/role/node",
            "Value": "1",
            "PropagateAtLaunch": true
          }
        ],
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ]
      }
    },
    "AWSAutoScalingLaunchConfigurationmasteruseast1amastersk8sdamdamme": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": 64,
              "DeleteOnTermination": true
            }
          },
          {
            "DeviceName": "/dev/sdc",
            "VirtualName": "ephemeral0"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "AWSIAMInstanceProfilemastersk8sdamdamme"
        },
        "ImageId": "ami-b0c6ccca",
        "InstanceType": "m3.medium",
        "KeyName": "kubernetes.k8s.damdam.me-d4:df:47:8b:fe:2e:b3:9c:34:34:92:35:4b:69:0f:7a",
        "SecurityGroups": [
          {
            "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
          }
        ],
        "UserData": "",
        "InstanceMonitoring": false
      }
    },
    "AWSAutoScalingLaunchConfigurationmasteruseast1bmastersk8sdamdamme": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": 64,
              "DeleteOnTermination": true
            }
          },
          {
            "DeviceName": "/dev/sdc",
            "VirtualName": "ephemeral0"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "AWSIAMInstanceProfilemastersk8sdamdamme"
        },
        "ImageId": "ami-b0c6ccca",
        "InstanceType": "m3.medium",
        "KeyName": "kubernetes.k8s.damdam.me-d4:df:47:8b:fe:2e:b3:9c:34:34:92:35:4b:69:0f:7a",
        "SecurityGroups": [
          {
            "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
          }
        ],
        "UserData": "",
        "InstanceMonitoring": false
      }
    },
    "AWSAutoScalingLaunchConfigurationmasteruseast1cmastersk8sdamdamme": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": 64,
              "DeleteOnTermination": true
            }
          },
          {
            "DeviceName": "/dev/sdc",
            "VirtualName": "ephemeral0"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "AWSIAMInstanceProfilemastersk8sdamdamme"
        },
        "ImageId": "ami-b0c6ccca",
        "InstanceType": "m3.medium",
        "KeyName": "kubernetes.k8s.damdam.me-d4:df:47:8b:fe:2e:b3:9c:34:34:92:35:4b:69:0f:7a",
        "SecurityGroups": [
          {
            "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
          }
        ],
        "UserData": "",
        "InstanceMonitoring": false
      }
    },
    "AWSAutoScalingLaunchConfigurationnodesk8sdamdamme": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": 128,
              "DeleteOnTermination": true
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "AWSIAMInstanceProfilenodesk8sdamdamme"
        },
        "ImageId": "ami-b0c6ccca",
        "InstanceType": "t2.medium",
        "KeyName": "kubernetes.k8s.damdam.me-d4:df:47:8b:fe:2e:b3:9c:34:34:92:35:4b:69:0f:7a",
        "SecurityGroups": [
          {
            "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
          }
        ],
        "UserData": "",
        "InstanceMonitoring": false
      }
    },
    "AWSEC2DHCPOptionsk8sdamdamme": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "ec2.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2InternetGatewayk8sdamdamme": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Route00000": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "AWSEC2RouteTablek8sdamdamme"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "AWSEC2InternetGatewayk8sdamdamme"
        }
      }
    },
    "AWSEC2RouteTablek8sdamdamme": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCk8sdamdamme"
        },
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/kops/role",
            "Value": "public"
          }
        ]
      }
    },
    "AWSEC2SecurityGroupEgressmasteregress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupEgressnodeegress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngressallmastertomaster": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1"
      }
    },
    "AWSEC2SecurityGroupIngressallmastertonode": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1"
      }
    },
    "AWSEC2SecurityGroupIngressallnodetonode": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
        },
        "FromPort": 0,
        "ToPort": 0,
        "IpProtocol": "-1"
      }
    },
    "AWSEC2SecurityGroupIngresshttpsexternaltomaster00000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "FromPort": 443,
        "ToPort": 443,
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngressnodetomastertcp12379": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
        },
        "FromPort": 1,
        "ToPort": 2379,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressnodetomastertcp23824000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
        },
        "FromPort": 2382,
        "ToPort": 4000,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressnodetomastertcp400365535": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
        },
        "FromPort": 4003,
        "ToPort": 65535,
        "IpProtocol": "tcp"
      }
    },
    "AWSEC2SecurityGroupIngressnodetomasterudp165535": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "SourceSecurityGroupId": {
          "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
        },
        "FromPort": 1,
        "ToPort": 65535,
        "IpProtocol": "udp"
      }
    },
    "AWSEC2SecurityGroupIngresssshexternaltomaster00000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupmastersk8sdamdamme"
        },
        "FromPort": 22,
        "ToPort": 22,
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupIngresssshexternaltonode00000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "AWSEC2SecurityGroupnodesk8sdamdamme"
        },
        "FromPort": 22,
        "ToPort": 22,
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AWSEC2SecurityGroupmastersk8sdamdamme": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCk8sdamdamme"
        },
        "GroupDescription": "Security group for masters",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "masters.k8s.damdam.me"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SecurityGroupnodesk8sdamdamme": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCk8sdamdamme"
        },
        "GroupDescription": "Security group for nodes",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "nodes.k8s.damdam.me"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2SubnetRouteTableAssociationuseast1ak8sdamdamme": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AWSEC2Subnetuseast1ak8sdamdamme"
        },
        "RouteTableId": {
          "Ref": "AWSEC2RouteTablek8sdamdamme"
        }
      }
    },
    "AWSEC2SubnetRouteTableAssociationuseast1bk8sdamdamme": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AWSEC2Subnetuseast1bk8sdamdamme"
        },
        "RouteTableId": {
          "Ref": "AWSEC2RouteTablek8sdamdamme"
        }
      }
    },
    "AWSEC2SubnetRouteTableAssociationuseast1ck8sdamdamme": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AWSEC2Subnetuseast1ck8sdamdamme"
        },
        "RouteTableId": {
          "Ref": "AWSEC2RouteTablek8sdamdamme"
        }
      }
    },
    "AWSEC2Subnetuseast1ak8sdamdamme": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCk8sdamdamme"
        },
        "CidrBlock": "172.20.32.0/19",
        "AvailabilityZone": "us-east-1a",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "us-east-1a.k8s.damdam.me"
          },
          {
            "Key": "SubnetType",
            "Value": "Public"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          }
        ]
      }
    },
    "AWSEC2Subnetuseast1bk8sdamdamme": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCk8sdamdamme"
        },
        "CidrBlock": "172.20.64.0/19",
        "AvailabilityZone": "us-east-1b",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "us-east-1b.k8s.damdam.me"
          },
          {
            "Key": "SubnetType",
            "Value": "Public"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          }
        ]
      }
    },
    "AWSEC2Subnetuseast1ck8sdamdamme": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCk8sdamdamme"
        },
        "CidrBlock": "172.20.96.0/19",
        "AvailabilityZone": "us-east-1c",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "us-east-1c.k8s.damdam.me"
          },
          {
            "Key": "SubnetType",
            "Value": "Public"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          },
          {
            "Key": "kubernetes.io/role/elb",
            "Value": "1"
          }
        ]
      }
    },
    "AWSEC2VPCDHCPOptionsAssociationk8sdamdamme": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCk8sdamdamme"
        },
        "DhcpOptionsId": {
          "Ref": "AWSEC2DHCPOptionsk8sdamdamme"
        }
      }
    },
    "AWSEC2VPCGatewayAttachmentk8sdamdamme": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "AWSEC2VPCk8sdamdamme"
        },
        "InternetGatewayId": {
          "Ref": "AWSEC2InternetGatewayk8sdamdamme"
        }
      }
    },
    "AWSEC2VPCk8sdamdamme": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.20.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumeaetcdeventsk8sdamdamme": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "Size": 20,
        "VolumeType": "gp2",
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "a.etcd-events.k8s.damdam.me"
          },
          {
            "Key": "k8s.io/etcd/events",
            "Value": "a/a,b,c"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumeaetcdmaink8sdamdamme": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "Size": 20,
        "VolumeType": "gp2",
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "a.etcd-main.k8s.damdam.me"
          },
          {
            "Key": "k8s.io/etcd/main",
            "Value": "a/a,b,c"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumebetcdeventsk8sdamdamme": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-east-1b",
        "Size": 20,
        "VolumeType": "gp2",
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "b.etcd-events.k8s.damdam.me"
          },
          {
            "Key": "k8s.io/etcd/events",
            "Value": "b/a,b,c"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumebetcdmaink8sdamdamme": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-east-1b",
        "Size": 20,
        "VolumeType": "gp2",
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "b.etcd-main.k8s.damdam.me"
          },
          {
            "Key": "k8s.io/etcd/main",
            "Value": "b/a,b,c"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumecetcdeventsk8sdamdamme": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-east-1c",
        "Size": 20,
        "VolumeType": "gp2",
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "c.etcd-events.k8s.damdam.me"
          },
          {
            "Key": "k8s.io/etcd/events",
            "Value": "c/a,b,c"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSEC2Volumecetcdmaink8sdamdamme": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "us-east-1c",
        "Size": 20,
        "VolumeType": "gp2",
        "Encrypted": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "k8s.damdam.me"
          },
          {
            "Key": "Name",
            "Value": "c.etcd-main.k8s.damdam.me"
          },
          {
            "Key": "k8s.io/etcd/main",
            "Value": "c/a,b,c"
          },
          {
            "Key": "k8s.io/role/master",
            "Value": "1"
          },
          {
            "Key": "kubernetes.io/cluster/k8s.damdam.me",
            "Value": "owned"
          }
        ]
      }
    },
    "AWSIAMInstanceProfilemastersk8sdamdamme": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "AWSIAMRolemastersk8sdamdamme"
          }
        ]
      }
    },
    "AWSIAMInstanceProfilenodesk8sdamdamme": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "AWSIAMRolenodesk8sdamdamme"
          }
        ]
      }
    },
    "AWSIAMPolicymastersk8sdamdamme": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "masters.k8s.damdam.me",
        "Roles": [
          {
            "Ref": "AWSIAMRolemastersk8sdamdamme"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeRegions",
                "ec2:DescribeRouteTables",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVolumes"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sEC2MasterPermsDescribeResources"
            },
            {
              "Action": [
                "ec2:CreateSecurityGroup",
                "ec2:CreateTags",
                "ec2:CreateVolume",
                "ec2:ModifyInstanceAttribute"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sEC2MasterPermsAllResources"
            },
            {
              "Action": [
                "ec2:AttachVolume",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:CreateRoute",
                "ec2:DeleteRoute",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteVolume",
                "ec2:DetachVolume",
                "ec2:RevokeSecurityGroupIngress"
              ],
              "Condition": {
                "StringEquals": {
                  "ec2:ResourceTag/KubernetesCluster": "k8s.damdam.me"
                }
              },
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sEC2MasterPermsTaggedResources"
            },
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:DescribeTags",
                "autoscaling:GetAsgForInstance"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sASMasterPermsAllResources"
            },
            {
              "Action": [
                "autoscaling:SetDesiredCapacity",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "autoscaling:UpdateAutoScalingGroup"
              ],
              "Condition": {
                "StringEquals": {
                  "autoscaling:ResourceTag/KubernetesCluster": "k8s.damdam.me"
                }
              },
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sASMasterPermsTaggedResources"
            },
            {
              "Action": [
                "elasticloadbalancing:AddTags",
                "elasticloadbalancing:AttachLoadBalancerToSubnets",
                "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                "elasticloadbalancing:CreateLoadBalancer",
                "elasticloadbalancing:CreateLoadBalancerPolicy",
                "elasticloadbalancing:CreateLoadBalancerListeners",
                "elasticloadbalancing:ConfigureHealthCheck",
                "elasticloadbalancing:DeleteLoadBalancer",
                "elasticloadbalancing:DeleteLoadBalancerListeners",
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                "elasticloadbalancing:DetachLoadBalancerFromSubnets",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sELBMasterPermsRestrictive"
            },
            {
              "Action": [
                "ec2:DescribeVpcs",
                "elasticloadbalancing:AddTags",
                "elasticloadbalancing:CreateListener",
                "elasticloadbalancing:CreateTargetGroup",
                "elasticloadbalancing:DeleteListener",
                "elasticloadbalancing:DeleteTargetGroup",
                "elasticloadbalancing:DescribeListeners",
                "elasticloadbalancing:DescribeLoadBalancerPolicies",
                "elasticloadbalancing:DescribeTargetGroups",
                "elasticloadbalancing:DescribeTargetHealth",
                "elasticloadbalancing:ModifyListener",
                "elasticloadbalancing:ModifyTargetGroup",
                "elasticloadbalancing:RegisterTargets",
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sNLBMasterPermsRestrictive"
            },
            {
              "Action": [
                "iam:ListServerCertificates",
                "iam:GetServerCertificate"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsMasterCertIAMPerms"
            },
            {
              "Action": [
                "s3:GetBucketLocation",
                "s3:ListBucket"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3:::damdam-k8s-aws-io"
              ],
              "Sid": "kopsK8sS3GetListBucket"
            },
            {
              "Action": [
                "s3:Get*"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/*",
              "Sid": "kopsK8sS3MasterBucketFullGet"
            },
            {
              "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:ListResourceRecordSets",
                "route53:GetHostedZone"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:route53:::hostedzone/Z2WPZKNT0WU6XO"
              ],
              "Sid": "kopsK8sRoute53Change"
            },
            {
              "Action": [
                "route53:GetChange"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:route53:::change/*"
              ],
              "Sid": "kopsK8sRoute53GetChanges"
            },
            {
              "Action": [
                "route53:ListHostedZones"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sRoute53ListZones"
            },
            {
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetRepositoryPolicy",
                "ecr:DescribeRepositories",
                "ecr:ListImages",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sECR"
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSIAMPolicynodesk8sdamdamme": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "nodes.k8s.damdam.me",
        "Roles": [
          {
            "Ref": "AWSIAMRolenodesk8sdamdamme"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeRegions"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sEC2NodePerms"
            },
            {
              "Action": [
                "s3:GetBucketLocation",
                "s3:ListBucket"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3:::damdam-k8s-aws-io"
              ],
              "Sid": "kopsK8sS3GetListBucket"
            },
            {
              "Action": [
                "s3:Get*"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/addons/*",
                "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/cluster.spec",
                "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/config",
                "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/instancegroup/*",
                "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/pki/issued/*",
                "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/pki/private/kube-proxy/*",
                "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/pki/private/kubelet/*",
                "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/pki/ssh/*",
                "arn:aws:s3:::damdam-k8s-aws-io/k8s.damdam.me/secrets/dockerconfig"
              ],
              "Sid": "kopsK8sS3NodeBucketSelectiveGet"
            },
            {
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetRepositoryPolicy",
                "ecr:DescribeRepositories",
                "ecr:ListImages",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Sid": "kopsK8sECR"
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSIAMRolemastersk8sdamdamme": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "masters.k8s.damdam.me",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "AWSIAMRolenodesk8sdamdamme": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "nodes.k8s.damdam.me",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    }
  }
}